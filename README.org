:PROPERTIES:
:ID:       419a89d6-eafc-41c8-9b67-26498a750db1
:type:     
:tags:
:archived: f
:modified: [2025-09-13 Sat 15:07]
:END:

#+TITLE: Sovereignty Stack
#+AUTHOR: Caleb Christensen
#+DESCRIPTION: Reclaiming hardware control through reproducible, auditable steps

* What This Is
A systematic approach to establishing user control over vendor-locked hardware through hypervisor isolation. Each step is documented, scripted, and verified.

[[https://github.com/calebc42/sovereignty-stack/actions/workflows/ci.yml][file:https://github.com/calebc42/sovereignty-stack/actions/workflows/ci.yml/badge.svg]]
[[https://opensource.org/licenses/ISC][file:https://img.shields.io/badge/License-ISC-blue.svg]]

* The Problem
Modern laptops are cryptographically locked by vendors. Even after purchase, you don't truly own your hardware - the firmware is sealed, telemetry is embedded, and obsolescence is forced through "end of support."

* The Solution
Build a verified security boundary between untrusted vendor firmware and user-controlled software using a Type-1 hypervisor. This creates a "Sovereignty Stack" where trust is established through verification, not assumption.

#+begin_example
[ Hardware ]
    |
[ Vendor Firmware ] ← Untrusted, unauditable
    |
[ Xen Hypervisor ] ← Verified handoff point
    |
[ Debian Dom0 ] ← Sovereign host under user control
    |
[ Guest VMs ] ← Isolated workloads
#+end_example

* Repository Structure
#+begin_src
sovereignty-stack/
├── steps/                    # Atomic, reproducible procedures
│   ├── 01-debian-download/   
│   │   ├── README.org       # Human-readable tutorial
│   │   ├── run.ps1          # Automated script (Windows)
│   │   ├── run.sh           # Automated script (Linux)
│   │   ├── verify.sh        # Verification tests
│   │   └── rollback.sh      # Undo operations
│   └── .../
├── docs/                     # Draft articles and research
├── lib/                      # Shared functions and helpers
├── schema/                   # JSON schema for state tracking
└── templates/                # Boilerplate for new steps
#+end_src

* Five Properties of Sovereignty
Each property is measurable and verifiable:

| Property | Description          | Verification                                    |
|----------+----------------------+-------------------------------------------------|
| P1       | Data Confidentiality | All storage encrypted with user-controlled keys |
| P2       | Boot Integrity       | Hypervisor hash matches reproducible build      |
| P3       | No Telemetry         | Zero packets to OEM endpoints in 24hr capture   |
| P4       | Full Storage Control | No hidden partitions or OEM-writable areas      |
| P5       | Device Isolation     | Every PCI device in separate IOMMU group        |

* For Readers: Two Paths

** Path 1: Learn by Doing (Recommended)
Start with [[file:steps/01-debian-download/README.org][Step 01: Download Debian]] and follow each command manually. Dynamic input fields help you build commands with your specific values. Every command is explained.

** Path 2: Automated Execution
Run the scripts directly:
#+begin_src bash
cd steps/01-debian-download
./run.ps1  # On Windows
# or
./run.sh   # On Linux
#+end_src

Both paths produce identical results, tracked in =sovereignty-chain.*.json= files.

* State Tracking: The Baton System
Each step produces a JSON "baton" file documenting:
- What was accomplished
- File hashes for verification  
- Environment details
- Timestamp

Example:
#+begin_src json
{
  "step": "01-debian-download",
  "timestamp": "2025-01-14T10:00:00Z",
  "artifacts": {
    "debian-13.1.0-amd64-netinst.iso": {
      "sha512": "873e9aa09a913660...",
      "size": 661651456
    }
  }
}
#+end_src

This creates an auditable chain of evidence from bare metal to working system.

* Current Status
** Verified Properties
- [ ] P1: Data Confidentiality
- [ ] P2: Boot Integrity  
- [ ] P3: No Telemetry
- [ ] P4: Full Storage Control
- [X] P5: Device Isolation

** Completed Steps
- [X] [[file:steps/download-debian/][Download Debian]] - Fetch and verify installer
- [X] [[file:steps/iommu-isolation/][IOMMU Verification and Device Isolation]] - Confirm device isolation

** In Progress
- [ ] [[file:docs/drafts/02-uefi.org][02 - UEFI Analysis]] - Examine firmware behavior
- [ ] [[file:docs/drafts/03-hypervisor.org][03 - Xen Installation]] - Deploy Type-1 hypervisor

** Planned
See [[file:index.org][Project Index]] for complete roadmap.

* Verification & CI
Every push triggers automated verification:
- Script syntax checking (shellcheck, PSScriptAnalyzer)
- Baton file schema validation
- ISO hash verification
- Step dependency checking

[[https://github.com/calebc42/sovereignty-stack/actions][View CI Results →]]

* Learning in Public
This project documents both successes and failures. Follow along:
- [[https://github.com/calebc42/sovereignty-stack/discussions][Discussions]] - Questions and learning log
- [[https://github.com/calebc42/sovereignty-stack/issues][Issues]] - Bugs and improvements

* Why This Matters
This isn't just about one laptop. It's about:
- **Ownership**: Actually controlling hardware you paid for
- **Transparency**: Every step documented and reproducible
- **Education**: Learning through systematic investigation
- **Trust**: Verification over assumption

* License
ISC - Use this however you want, but I'm not responsible if you brick your laptop.

* Acknowledgments
Built on the shoulders of giants: Debian, Xen, Coreboot, and countless security researchers who refuse to accept "because we said so" as an answer.

---
/In 2025, ownership is not assumed. It is proven./
